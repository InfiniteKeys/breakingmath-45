// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://woosegomxvbgzelyqvoj.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Indvb3NlZ29teHZiZ3plbHlxdm9qIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg2Nzg3OTAsImV4cCI6MjA3NDI1NDc5MH0.htpKQLRZjqwochLN7MBVI8tA5F-AAwktDd5SLq6vUSc";

// Network status detection
let isOnline = navigator.onLine;
let retryCount = 0;
const MAX_RETRIES = 3;

window.addEventListener('online', () => { isOnline = true; retryCount = 0; });
window.addEventListener('offline', () => { isOnline = false; });

// Enhanced fetch function with comprehensive network handling
const restrictedNetworkFetch = async (url: string, options: RequestInit = {}): Promise<Response> => {
  const controller = new AbortController();
  const baseTimeout = 8000;
  const timeoutId = setTimeout(() => controller.abort(), baseTimeout + (retryCount * 2000));

  try {
    // Skip if clearly offline
    if (!isOnline) {
      throw new Error('Network offline');
    }

    // Enhanced headers to bypass common network restrictions
    const enhancedHeaders: HeadersInit = {
      ...options.headers,
      'Accept': 'application/json, text/plain, */*',
      'Content-Type': options.method === 'POST' || options.method === 'PUT' || options.method === 'PATCH' 
        ? 'application/json' 
        : 'application/json',
      'Cache-Control': 'no-cache, no-store, must-revalidate',
      'Pragma': 'no-cache',
      'X-Requested-With': 'XMLHttpRequest',
      // Remove upgrade headers that might trigger HTTP/2
      'Connection': 'keep-alive'
    };

    // Remove problematic headers for restricted networks
    delete enhancedHeaders['Upgrade-Insecure-Requests'];
    delete enhancedHeaders['Upgrade'];
    delete enhancedHeaders['HTTP2-Settings'];

    const fetchOptions: RequestInit = {
      ...options,
      signal: controller.signal,
      headers: enhancedHeaders,
      mode: 'cors',
      credentials: 'omit', // Avoid credential issues on restricted networks
      referrerPolicy: 'no-referrer-when-downgrade'
    };

    const response = await fetch(url, fetchOptions);
    clearTimeout(timeoutId);
    retryCount = 0; // Reset on success
    return response;

  } catch (error) {
    clearTimeout(timeoutId);
    
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    const isCorsError = errorMessage.includes('CORS') || errorMessage.includes('cors');
    const isNetworkError = errorMessage.includes('NetworkError') || errorMessage.includes('fetch');
    const isQuicError = errorMessage.includes('QUIC') || errorMessage.includes('HTTP/3');
    
    console.warn(`Network error (attempt ${retryCount + 1}/${MAX_RETRIES}):`, errorMessage);
    
    // Retry logic for network issues
    if (retryCount < MAX_RETRIES && (isCorsError || isNetworkError || isQuicError)) {
      retryCount++;
      
      // Exponential backoff: 1s, 2s, 4s
      const backoffDelay = Math.pow(2, retryCount - 1) * 1000;
      
      await new Promise(resolve => setTimeout(resolve, backoffDelay));
      
      // Retry with simplified headers
      const retryController = new AbortController();
      const retryTimeoutId = setTimeout(() => retryController.abort(), baseTimeout * 2);
      
      try {
        const retryOptions: RequestInit = {
          ...options,
          signal: retryController.signal,
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          },
          mode: 'cors',
          credentials: 'omit',
          cache: 'no-cache'
        };
        
        const retryResponse = await fetch(url, retryOptions);
        clearTimeout(retryTimeoutId);
        return retryResponse;
        
      } catch (retryError) {
        clearTimeout(retryTimeoutId);
        
        // If this is the last retry, throw the original error
        if (retryCount >= MAX_RETRIES) {
          throw new Error(`Network requests blocked by firewall. Original error: ${errorMessage}`);
        }
        
        // Continue to next retry
        return restrictedNetworkFetch(url, options);
      }
    }
    
    // Final error with helpful message
    if (isCorsError || isNetworkError) {
      throw new Error(`School network blocking requests. Please try from a different network or contact IT support. Error: ${errorMessage}`);
    }
    
    throw error;
  }
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  },
  global: {
    fetch: restrictedNetworkFetch,
  },
  db: {
    schema: 'public',
  },
  realtime: {
    params: {
      eventsPerSecond: 2,
    },
  },
});