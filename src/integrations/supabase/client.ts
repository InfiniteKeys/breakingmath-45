// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://woosegomxvbgzelyqvoj.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Indvb3NlZ29teHZiZ3plbHlxdm9qIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTg2Nzg3OTAsImV4cCI6MjA3NDI1NDc5MH0.htpKQLRZjqwochLN7MBVI8tA5F-AAwktDd5SLq6vUSc";

// Aggressive custom fetch for restricted networks
const restrictedNetworkFetch = async (url: RequestInfo | URL, options: RequestInit = {}): Promise<Response> => {
  const urlObj = new URL(url.toString());
  
  // Force all authentication through URL parameters for maximum compatibility
  urlObj.searchParams.set('apikey', SUPABASE_PUBLISHABLE_KEY);
  
  // Build minimal headers to avoid filtering
  const basicHeaders: Record<string, string> = {
    'apikey': SUPABASE_PUBLISHABLE_KEY,
    'Content-Type': 'application/json',
    'Accept': 'application/json',
  };
  
  // Add any existing headers but keep it minimal
  if (options.headers) {
    const existingHeaders = new Headers(options.headers);
    existingHeaders.forEach((value, key) => {
      if (!['user-agent', 'referer', 'origin'].includes(key.toLowerCase())) {
        basicHeaders[key] = value;
      }
    });
  }
  
  const requestOptions: RequestInit = {
    ...options,
    headers: basicHeaders,
    mode: 'cors',
    cache: 'no-cache',
    credentials: 'omit', // Don't send credentials that might be blocked
  };
  
  try {
    const response = await fetch(urlObj.toString(), requestOptions);
    
    // If we get a network error or CORS error, throw to trigger retry
    if (!response.ok && (response.status === 0 || response.status >= 500)) {
      throw new Error(`Network error: ${response.status}`);
    }
    
    return response;
  } catch (error) {
    console.warn('Network request failed:', error);
    throw error;
  }
};

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  global: {
    fetch: restrictedNetworkFetch,
  },
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
    // Add these to help with restricted networks
    detectSessionInUrl: false,
    flowType: 'implicit',
  },
  db: {
    schema: 'public',
  },
  realtime: {
    params: {
      eventsPerSecond: 2, // Reduce realtime load
    },
  },
});